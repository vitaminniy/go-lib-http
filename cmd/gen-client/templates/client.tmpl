// Code generated by {{ .CodeGen }}. DO NOT EDIT.
package {{ .Package }}

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"

	"github.com/vitaminniy/go-lib-http/config"
)

// This is needed to have bytes imported when non-body requests are generated.
var _ = bytes.Buffer{}

// Option overrides {{ .ClientName }} creation.
type Option func(*{{ .ClientName }})

// WithTransport overrides the default http client transport.
func WithTransport(transport http.RoundTripper) Option {
	return func(cl *{{ .ClientName }}) {
		cl.httpClient.Transport = transport
	}
}

// WithTimeout overrides the default http client timeout.
func WithTimeout(timeout time.Duration) Option {
	return func(cl *{{ .ClientName }}) {
		cl.httpClient.Timeout = timeout
	}
}

// WithSnapshot overrides the default config snapshot.
func WithSnapshot(snapshot *config.Snapshot[Config]) Option {
	return func(cl *{{ .ClientName }}) {
		cl.snapshot = snapshot
	}
}

// New{{ .ClientName }} creates a new {{ .ClientName }} http client.
func New{{ .ClientName }} (baseurl string, opts ...Option) (*{{ .ClientName }}, error) {
	parsed, err := url.Parse(baseurl)
	if err != nil {
		return nil, fmt.Errorf("could not parse base url: %w", err)
	}

	cli := &{{ .ClientName }}{
		baseURL:	parsed,
		httpClient: &http.Client{
			Timeout: time.Second * 1, // Arbitrary value to avoid hanging forever.
		},
		snapshot: config.NewSnapshot(DefaultConfig()),
	}

	for _, opt := range opts {
		opt(cli)
	}

	return cli, nil
}

type {{ .ClientName }} struct {
  baseURL *url.URL
  httpClient *http.Client
  snapshot *config.Snapshot[Config]
}


func (cl *{{ .ClientName }}) getConfig() Config {
	if cl.snapshot == nil {
		return DefaultConfig()
	}

	return cl.snapshot.Get()
}
