type {{ .Request.Name }} struct {
	{{- range .Request.Headers }}
	// Header{{ .Name }} is "{{ .Key }}" header value.
	Header{{ .Name }} string
	{{- end }}
	// Headers is a list of additional headers.
	Headers map[string]string

	{{ with .Request.QueryParams }}
	{{ range .Values }}
	// Query{{ .Name }} is "{{ .Key }}" query parameter.
	Query{{ .Name }} {{ if .Required }} string {{ else }} *string {{ end }}
	{{- end }}
	{{- end }}

	{{ with .Request.Body }}
	// Body is a request body.
	Body *{{ .Name }}
	{{- end -}}
}

type {{ .Response.Name }} struct {
	Headers map[string][]string

	{{ range .Response.Codes }}
	Body{{ .Code }} *{{ .Name }}
	{{ end }}
}

func (cl *{{ .Client }}) {{ .Name }}(
	ctx context.Context,
	request *{{ .Request.Name }},
) (*{{ .Response.Name }}, error) {
	url := cl.baseURL.JoinPath("{{ .Path }}")

	{{- with .Request.QueryParams }}
	{
		query := url.Query()

		{{ range .Values -}}

		{{- if .Required -}}
		query.Add("{{ .Key }}", request.Query{{ .Name }})
		{{ else }}
		if request.Query{{ .Name }} != nil {
			query.Add("{{ .Key }}", *request.Query{{ .Name }})
		}
		{{- end -}}

		{{ end }}

		url.RawQuery = query.Encode()
	}
	{{ end }}

	{{ if .Request.Body }}
	body := &bytes.Buffer{}
	if err := json.NewEncoder(body).Encode(&request.Body); err != nil {
		return nil, fmt.Errorf("could not encode request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "{{ .Method }}", url.String(), body)
	if err != nil {
		return nil, fmt.Errorf("could not prepare request: %w", err)
	}

	req.Header.Add("Content-Type", "application/json")
	{{ else }}
	req, err := http.NewRequestWithContext(ctx, "{{ .Method }}", url.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not prepare request: %w", err)
	}
	{{ end }}

	req.Header.Add("Accept", "application/json")

	{{ range .Request.Headers }}
	req.Header.Add("{{ .Key }}", request.Header{{ .Name }})
	{{- end }}

	for key, value := range request.Headers {
		req.Header.Set(key, value)
	}

	resp, err := cl.httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("could not do http request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= http.StatusBadRequest {
		raw, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, fmt.Errorf("could not read response with status %d: %w", resp.StatusCode, err)
		}

		return nil, fmt.Errorf("got response with status %d: %q", resp.StatusCode, string(raw))
	}

	response := &{{ .Response.Name }}{
		Headers: resp.Header,
	}

	{{ range .Response.Codes }}
	if resp.StatusCode == {{ .Code }} {
		var body {{ .Name }}
		if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {
			return nil, fmt.Errorf("could not decode response [%d]: %w", resp.StatusCode, err)
		}

		response.Body{{ .Code }} = &body

		return response, nil
	}
	{{ end }}

	return nil, fmt.Errorf("unhandled response code: %d", resp.StatusCode)
}

